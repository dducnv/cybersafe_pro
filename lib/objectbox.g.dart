// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:cybersafe_pro/database/models/account_custom_field.dart';
import 'package:cybersafe_pro/database/models/account_ojb_model.dart';
import 'package:cybersafe_pro/database/models/category_ojb_model.dart';
import 'package:cybersafe_pro/database/models/icon_custom_model.dart';
import 'package:cybersafe_pro/database/models/password_history_model.dart';
import 'package:cybersafe_pro/database/models/totp_ojb_model.dart';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 7720765967536005100),
      name: 'AccountCustomFieldOjbModel',
      lastPropertyId: const obx_int.IdUid(6, 1599625332435180919),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1027999289893133532),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6810372553496786412),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6756111045446270073),
            name: 'value',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4112533644947478733),
            name: 'hintText',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4951341637174002499),
            name: 'typeField',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1599625332435180919),
            name: 'accountId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 9223319715626760245),
            relationTarget: 'AccountOjbModel')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 808721809346376920),
      name: 'AccountOjbModel',
      lastPropertyId: const obx_int.IdUid(12, 3734455674733270868),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1681514535368842462),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2625426417278383013),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 615286758753448621),
            name: 'email',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5424898965257979061),
            name: 'password',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 9173965011134390942),
            name: 'notes',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 603238089867337940),
            name: 'icon',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6270388988144688518),
            name: 'passwordUpdatedAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 9156602806049161939),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 3899775664941408825),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 3381464135663947211),
            name: 'categoryId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 6717451217174600009),
            relationTarget: 'CategoryOjbModel'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 8397634272657106479),
            name: 'totpId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(3, 6189364608502334637),
            relationTarget: 'TOTPOjbModel'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 3734455674733270868),
            name: 'iconCustomId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(6, 925758013839913807),
            relationTarget: 'IconCustomModel')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'customFields',
            srcEntity: 'AccountCustomFieldOjbModel',
            srcField: 'account'),
        obx_int.ModelBacklink(
            name: 'passwordHistories',
            srcEntity: 'PasswordHistory',
            srcField: 'account')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 1129773840658876529),
      name: 'CategoryOjbModel',
      lastPropertyId: const obx_int.IdUid(5, 16479445437159146),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4024083096627149080),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8872622909213525147),
            name: 'categoryName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5509757696427258474),
            name: 'indexPos',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3844861102953137554),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 16479445437159146),
            name: 'updatedAt',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'accounts',
            srcEntity: 'AccountOjbModel',
            srcField: 'category')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 3018443929711597194),
      name: 'PasswordHistory',
      lastPropertyId: const obx_int.IdUid(4, 7289120895696701836),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5819017810655339199),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2667871814024352714),
            name: 'password',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5165880507350807871),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7289120895696701836),
            name: 'accountId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(4, 8616999152411792910),
            relationTarget: 'AccountOjbModel')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 1076262210416939821),
      name: 'TOTPOjbModel',
      lastPropertyId: const obx_int.IdUid(6, 2469613977232459699),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1117581393077461301),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8564762779212685146),
            name: 'secretKey',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5582173328156468147),
            name: 'isShowToHome',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2563563088476085377),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1140319654760595252),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2469613977232459699),
            name: 'accountId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(5, 1154736115679771846),
            relationTarget: 'AccountOjbModel')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 965409409935003527),
      name: 'IconCustomModel',
      lastPropertyId: const obx_int.IdUid(4, 5132215409006114972),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 9024031581796992978),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3048476553136400367),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3062578946622634533),
            name: 'imageBase64',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5132215409006114972),
            name: 'imageBase64DarkModel',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'accounts',
            srcEntity: 'AccountOjbModel',
            srcField: 'iconCustom')
      ])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(6, 965409409935003527),
      lastIndexId: const obx_int.IdUid(6, 925758013839913807),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    AccountCustomFieldOjbModel: obx_int.EntityDefinition<
            AccountCustomFieldOjbModel>(
        model: _entities[0],
        toOneRelations: (AccountCustomFieldOjbModel object) => [object.account],
        toManyRelations: (AccountCustomFieldOjbModel object) => {},
        getId: (AccountCustomFieldOjbModel object) => object.id,
        setId: (AccountCustomFieldOjbModel object, int id) {
          object.id = id;
        },
        objectToFB: (AccountCustomFieldOjbModel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final valueOffset = fbb.writeString(object.value);
          final hintTextOffset = fbb.writeString(object.hintText);
          final typeFieldOffset = fbb.writeString(object.typeField);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, valueOffset);
          fbb.addOffset(3, hintTextOffset);
          fbb.addOffset(4, typeFieldOffset);
          fbb.addInt64(5, object.account.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final valueParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final hintTextParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final typeFieldParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final object = AccountCustomFieldOjbModel(
              id: idParam,
              name: nameParam,
              value: valueParam,
              hintText: hintTextParam,
              typeField: typeFieldParam);
          object.account.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.account.attach(store);
          return object;
        }),
    AccountOjbModel: obx_int.EntityDefinition<AccountOjbModel>(
        model: _entities[1],
        toOneRelations: (AccountOjbModel object) =>
            [object.category, object.totp, object.iconCustom],
        toManyRelations: (AccountOjbModel object) => {
              obx_int.RelInfo<AccountCustomFieldOjbModel>.toOneBacklink(
                  6,
                  object.id,
                  (AccountCustomFieldOjbModel srcObject) =>
                      srcObject.account): object.customFields,
              obx_int.RelInfo<PasswordHistory>.toOneBacklink(4, object.id,
                      (PasswordHistory srcObject) => srcObject.account):
                  object.passwordHistories
            },
        getId: (AccountOjbModel object) => object.id,
        setId: (AccountOjbModel object, int id) {
          object.id = id;
        },
        objectToFB: (AccountOjbModel object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final passwordOffset = object.password == null
              ? null
              : fbb.writeString(object.password!);
          final notesOffset =
              object.notes == null ? null : fbb.writeString(object.notes!);
          final iconOffset =
              object.icon == null ? null : fbb.writeString(object.icon!);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, emailOffset);
          fbb.addOffset(3, passwordOffset);
          fbb.addOffset(4, notesOffset);
          fbb.addOffset(5, iconOffset);
          fbb.addInt64(6, object.passwordUpdatedAt?.millisecondsSinceEpoch);
          fbb.addInt64(7, object.createdAt?.millisecondsSinceEpoch);
          fbb.addInt64(8, object.updatedAt?.millisecondsSinceEpoch);
          fbb.addInt64(9, object.category.targetId);
          fbb.addInt64(10, object.totp.targetId);
          fbb.addInt64(11, object.iconCustom.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final passwordUpdatedAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final createdAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18);
          final updatedAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final passwordParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final notesParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final iconParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final passwordUpdatedAtParam = passwordUpdatedAtValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(passwordUpdatedAtValue);
          final createdAtParam = createdAtValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(createdAtValue);
          final updatedAtParam = updatedAtValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(updatedAtValue);
          final object = AccountOjbModel(
              id: idParam,
              title: titleParam,
              email: emailParam,
              password: passwordParam,
              notes: notesParam,
              icon: iconParam,
              passwordUpdatedAt: passwordUpdatedAtParam,
              createdAt: createdAtParam,
              updatedAt: updatedAtParam);
          object.category.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.category.attach(store);
          object.totp.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.totp.attach(store);
          object.iconCustom.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.iconCustom.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<AccountOjbModel>(
              object.customFields,
              store,
              obx_int.RelInfo<AccountCustomFieldOjbModel>.toOneBacklink(
                  6,
                  object.id,
                  (AccountCustomFieldOjbModel srcObject) => srcObject.account));
          obx_int.InternalToManyAccess.setRelInfo<AccountOjbModel>(
              object.passwordHistories,
              store,
              obx_int.RelInfo<PasswordHistory>.toOneBacklink(4, object.id,
                  (PasswordHistory srcObject) => srcObject.account));
          return object;
        }),
    CategoryOjbModel: obx_int.EntityDefinition<CategoryOjbModel>(
        model: _entities[2],
        toOneRelations: (CategoryOjbModel object) => [],
        toManyRelations: (CategoryOjbModel object) => {
              obx_int.RelInfo<AccountOjbModel>.toOneBacklink(10, object.id,
                      (AccountOjbModel srcObject) => srcObject.category):
                  object.accounts
            },
        getId: (CategoryOjbModel object) => object.id,
        setId: (CategoryOjbModel object, int id) {
          object.id = id;
        },
        objectToFB: (CategoryOjbModel object, fb.Builder fbb) {
          final categoryNameOffset = fbb.writeString(object.categoryName);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, categoryNameOffset);
          fbb.addInt64(2, object.indexPos);
          fbb.addInt64(3, object.createdAt?.millisecondsSinceEpoch);
          fbb.addInt64(4, object.updatedAt?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final updatedAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final categoryNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final indexPosParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final createdAtParam = createdAtValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(createdAtValue);
          final updatedAtParam = updatedAtValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(updatedAtValue);
          final object = CategoryOjbModel(
              id: idParam,
              categoryName: categoryNameParam,
              indexPos: indexPosParam,
              createdAt: createdAtParam,
              updatedAt: updatedAtParam);
          obx_int.InternalToManyAccess.setRelInfo<CategoryOjbModel>(
              object.accounts,
              store,
              obx_int.RelInfo<AccountOjbModel>.toOneBacklink(10, object.id,
                  (AccountOjbModel srcObject) => srcObject.category));
          return object;
        }),
    PasswordHistory: obx_int.EntityDefinition<PasswordHistory>(
        model: _entities[3],
        toOneRelations: (PasswordHistory object) => [object.account],
        toManyRelations: (PasswordHistory object) => {},
        getId: (PasswordHistory object) => object.id,
        setId: (PasswordHistory object, int id) {
          object.id = id;
        },
        objectToFB: (PasswordHistory object, fb.Builder fbb) {
          final passwordOffset = fbb.writeString(object.password);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, passwordOffset);
          fbb.addInt64(2, object.createdAt?.millisecondsSinceEpoch);
          fbb.addInt64(3, object.account.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final passwordParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final createdAtParam = createdAtValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(createdAtValue);
          final object = PasswordHistory(
              id: idParam, password: passwordParam, createdAt: createdAtParam);
          object.account.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.account.attach(store);
          return object;
        }),
    TOTPOjbModel: obx_int.EntityDefinition<TOTPOjbModel>(
        model: _entities[4],
        toOneRelations: (TOTPOjbModel object) => [object.account],
        toManyRelations: (TOTPOjbModel object) => {},
        getId: (TOTPOjbModel object) => object.id,
        setId: (TOTPOjbModel object, int id) {
          object.id = id;
        },
        objectToFB: (TOTPOjbModel object, fb.Builder fbb) {
          final secretKeyOffset = fbb.writeString(object.secretKey);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, secretKeyOffset);
          fbb.addBool(2, object.isShowToHome);
          fbb.addInt64(3, object.createdAt?.millisecondsSinceEpoch);
          fbb.addInt64(4, object.updatedAt?.millisecondsSinceEpoch);
          fbb.addInt64(5, object.account.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final updatedAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final secretKeyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final isShowToHomeParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false);
          final createdAtParam = createdAtValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(createdAtValue);
          final updatedAtParam = updatedAtValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(updatedAtValue);
          final object = TOTPOjbModel(
              id: idParam,
              secretKey: secretKeyParam,
              isShowToHome: isShowToHomeParam,
              createdAt: createdAtParam,
              updatedAt: updatedAtParam);
          object.account.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.account.attach(store);
          return object;
        }),
    IconCustomModel: obx_int.EntityDefinition<IconCustomModel>(
        model: _entities[5],
        toOneRelations: (IconCustomModel object) => [],
        toManyRelations: (IconCustomModel object) => {
              obx_int.RelInfo<AccountOjbModel>.toOneBacklink(12, object.id,
                      (AccountOjbModel srcObject) => srcObject.iconCustom):
                  object.accounts
            },
        getId: (IconCustomModel object) => object.id,
        setId: (IconCustomModel object, int id) {
          object.id = id;
        },
        objectToFB: (IconCustomModel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final imageBase64Offset = fbb.writeString(object.imageBase64);
          final imageBase64DarkModelOffset = object.imageBase64DarkModel == null
              ? null
              : fbb.writeString(object.imageBase64DarkModel!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, imageBase64Offset);
          fbb.addOffset(3, imageBase64DarkModelOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final imageBase64Param =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final imageBase64DarkModelParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final object = IconCustomModel(
              id: idParam,
              name: nameParam,
              imageBase64: imageBase64Param,
              imageBase64DarkModel: imageBase64DarkModelParam);
          obx_int.InternalToManyAccess.setRelInfo<IconCustomModel>(
              object.accounts,
              store,
              obx_int.RelInfo<AccountOjbModel>.toOneBacklink(12, object.id,
                  (AccountOjbModel srcObject) => srcObject.iconCustom));
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [AccountCustomFieldOjbModel] entity fields to define ObjectBox queries.
class AccountCustomFieldOjbModel_ {
  /// See [AccountCustomFieldOjbModel.id].
  static final id = obx.QueryIntegerProperty<AccountCustomFieldOjbModel>(
      _entities[0].properties[0]);

  /// See [AccountCustomFieldOjbModel.name].
  static final name = obx.QueryStringProperty<AccountCustomFieldOjbModel>(
      _entities[0].properties[1]);

  /// See [AccountCustomFieldOjbModel.value].
  static final value = obx.QueryStringProperty<AccountCustomFieldOjbModel>(
      _entities[0].properties[2]);

  /// See [AccountCustomFieldOjbModel.hintText].
  static final hintText = obx.QueryStringProperty<AccountCustomFieldOjbModel>(
      _entities[0].properties[3]);

  /// See [AccountCustomFieldOjbModel.typeField].
  static final typeField = obx.QueryStringProperty<AccountCustomFieldOjbModel>(
      _entities[0].properties[4]);

  /// See [AccountCustomFieldOjbModel.account].
  static final account =
      obx.QueryRelationToOne<AccountCustomFieldOjbModel, AccountOjbModel>(
          _entities[0].properties[5]);
}

/// [AccountOjbModel] entity fields to define ObjectBox queries.
class AccountOjbModel_ {
  /// See [AccountOjbModel.id].
  static final id =
      obx.QueryIntegerProperty<AccountOjbModel>(_entities[1].properties[0]);

  /// See [AccountOjbModel.title].
  static final title =
      obx.QueryStringProperty<AccountOjbModel>(_entities[1].properties[1]);

  /// See [AccountOjbModel.email].
  static final email =
      obx.QueryStringProperty<AccountOjbModel>(_entities[1].properties[2]);

  /// See [AccountOjbModel.password].
  static final password =
      obx.QueryStringProperty<AccountOjbModel>(_entities[1].properties[3]);

  /// See [AccountOjbModel.notes].
  static final notes =
      obx.QueryStringProperty<AccountOjbModel>(_entities[1].properties[4]);

  /// See [AccountOjbModel.icon].
  static final icon =
      obx.QueryStringProperty<AccountOjbModel>(_entities[1].properties[5]);

  /// See [AccountOjbModel.passwordUpdatedAt].
  static final passwordUpdatedAt =
      obx.QueryDateProperty<AccountOjbModel>(_entities[1].properties[6]);

  /// See [AccountOjbModel.createdAt].
  static final createdAt =
      obx.QueryDateProperty<AccountOjbModel>(_entities[1].properties[7]);

  /// See [AccountOjbModel.updatedAt].
  static final updatedAt =
      obx.QueryDateProperty<AccountOjbModel>(_entities[1].properties[8]);

  /// See [AccountOjbModel.category].
  static final category =
      obx.QueryRelationToOne<AccountOjbModel, CategoryOjbModel>(
          _entities[1].properties[9]);

  /// See [AccountOjbModel.totp].
  static final totp = obx.QueryRelationToOne<AccountOjbModel, TOTPOjbModel>(
      _entities[1].properties[10]);

  /// See [AccountOjbModel.iconCustom].
  static final iconCustom =
      obx.QueryRelationToOne<AccountOjbModel, IconCustomModel>(
          _entities[1].properties[11]);

  /// see [AccountOjbModel.customFields]
  static final customFields =
      obx.QueryBacklinkToMany<AccountCustomFieldOjbModel, AccountOjbModel>(
          AccountCustomFieldOjbModel_.account);

  /// see [AccountOjbModel.passwordHistories]
  static final passwordHistories =
      obx.QueryBacklinkToMany<PasswordHistory, AccountOjbModel>(
          PasswordHistory_.account);
}

/// [CategoryOjbModel] entity fields to define ObjectBox queries.
class CategoryOjbModel_ {
  /// See [CategoryOjbModel.id].
  static final id =
      obx.QueryIntegerProperty<CategoryOjbModel>(_entities[2].properties[0]);

  /// See [CategoryOjbModel.categoryName].
  static final categoryName =
      obx.QueryStringProperty<CategoryOjbModel>(_entities[2].properties[1]);

  /// See [CategoryOjbModel.indexPos].
  static final indexPos =
      obx.QueryIntegerProperty<CategoryOjbModel>(_entities[2].properties[2]);

  /// See [CategoryOjbModel.createdAt].
  static final createdAt =
      obx.QueryDateProperty<CategoryOjbModel>(_entities[2].properties[3]);

  /// See [CategoryOjbModel.updatedAt].
  static final updatedAt =
      obx.QueryDateProperty<CategoryOjbModel>(_entities[2].properties[4]);

  /// see [CategoryOjbModel.accounts]
  static final accounts =
      obx.QueryBacklinkToMany<AccountOjbModel, CategoryOjbModel>(
          AccountOjbModel_.category);
}

/// [PasswordHistory] entity fields to define ObjectBox queries.
class PasswordHistory_ {
  /// See [PasswordHistory.id].
  static final id =
      obx.QueryIntegerProperty<PasswordHistory>(_entities[3].properties[0]);

  /// See [PasswordHistory.password].
  static final password =
      obx.QueryStringProperty<PasswordHistory>(_entities[3].properties[1]);

  /// See [PasswordHistory.createdAt].
  static final createdAt =
      obx.QueryDateProperty<PasswordHistory>(_entities[3].properties[2]);

  /// See [PasswordHistory.account].
  static final account =
      obx.QueryRelationToOne<PasswordHistory, AccountOjbModel>(
          _entities[3].properties[3]);
}

/// [TOTPOjbModel] entity fields to define ObjectBox queries.
class TOTPOjbModel_ {
  /// See [TOTPOjbModel.id].
  static final id =
      obx.QueryIntegerProperty<TOTPOjbModel>(_entities[4].properties[0]);

  /// See [TOTPOjbModel.secretKey].
  static final secretKey =
      obx.QueryStringProperty<TOTPOjbModel>(_entities[4].properties[1]);

  /// See [TOTPOjbModel.isShowToHome].
  static final isShowToHome =
      obx.QueryBooleanProperty<TOTPOjbModel>(_entities[4].properties[2]);

  /// See [TOTPOjbModel.createdAt].
  static final createdAt =
      obx.QueryDateProperty<TOTPOjbModel>(_entities[4].properties[3]);

  /// See [TOTPOjbModel.updatedAt].
  static final updatedAt =
      obx.QueryDateProperty<TOTPOjbModel>(_entities[4].properties[4]);

  /// See [TOTPOjbModel.account].
  static final account = obx.QueryRelationToOne<TOTPOjbModel, AccountOjbModel>(
      _entities[4].properties[5]);
}

/// [IconCustomModel] entity fields to define ObjectBox queries.
class IconCustomModel_ {
  /// See [IconCustomModel.id].
  static final id =
      obx.QueryIntegerProperty<IconCustomModel>(_entities[5].properties[0]);

  /// See [IconCustomModel.name].
  static final name =
      obx.QueryStringProperty<IconCustomModel>(_entities[5].properties[1]);

  /// See [IconCustomModel.imageBase64].
  static final imageBase64 =
      obx.QueryStringProperty<IconCustomModel>(_entities[5].properties[2]);

  /// See [IconCustomModel.imageBase64DarkModel].
  static final imageBase64DarkModel =
      obx.QueryStringProperty<IconCustomModel>(_entities[5].properties[3]);

  /// see [IconCustomModel.accounts]
  static final accounts =
      obx.QueryBacklinkToMany<AccountOjbModel, IconCustomModel>(
          AccountOjbModel_.iconCustom);
}
